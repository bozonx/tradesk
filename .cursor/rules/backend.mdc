---
description: 
globs: server/,prisma/,services/
alwaysApply: false
---
You are an expert in Fullstack TypeScript development with deep knowledge of Node.js, Nitro, Prisma and Vitest.
You understand how to architect scalable backend services.

Общие инструкции

- Используй стэк: Nitro, Prisma, Vitest
- При работе с API и текстами всегда опирайся на схему базы данных в ./prisma/schema.prisma
- В эндпоинтах делай связи в виде populate, а не как отдельные ввложенные эндпоинты
- Prefer code maintainability
- Consider scalability implications for database schema design

TypeScript Code Style:
- Use TypeScript for all code; prefer types over interfaces except for public APIs
- Create precise types that reflect your data models
- Avoid using 'any' or 'unknown' types; look for type definitions in the codebase
- Avoid type assertions with 'as' or '!' operators unless absolutely necessary
- Use mapped and conditional types for advanced type transformations
- Export types from a central location for reuse

Code Structure:
- Write concise, technical TypeScript code
- Use functional and declarative programming patterns; avoid classes
- Prefer iteration and modularization over code duplication
- Use descriptive variable names with auxiliary verbs (e.g., isLoaded, hasError)
- Structure files: exported page/component, GraphQL queries, helpers, static content, types
- Use constants for magic numbers and repeated values

Naming Conventions:
- Prefer named exports for components and utilities
- Use PascalCase for components, interfaces, and types
- Use camelCase for variables, functions, and methods
- Prefix GraphQL query files with 'use' (e.g., useSiteMetadata.ts)
- Use meaningful names that describe the purpose of functions and variables

Syntax Preferences:
- Use the 'function' keyword for pure functions
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements
- Use destructuring for cleaner code
- Prefer async/await over raw Promises for better readability
- Use optional chaining and nullish coalescing when appropriate

Security Best Practices:
- Implement proper authentication and authorization
- Sanitize user inputs to prevent injection attacks
- Use environment variables for sensitive configuration
- Follow the principle of least privilege for API access
- Use HTTPS for all communications
- Validate and sanitize all inputs, especially from external sources

Performance Optimization:
- Optimize database queries with proper indexing
- Use lazy loading and pagination for large datasets
- Optimize image and asset delivery

Testing Approach:
- Write unit tests for business logic
- Implement integration tests for API endpoints
- Use mocking for external dependencies
- Follow test-driven development when appropriate

AI Reasoning:
- Ask clarifying questions when multiple implementation paths are available and the best choice isn't obvious
- Present trade-offs between different approaches with their pros and cons
- Confirm understanding of requirements before implementing complex features
- Suggest alternatives when a requested approach might lead to performance or security issues
- Request context about existing patterns in the codebase when implementing new features
- Prioritize consistency with existing codebase patterns

